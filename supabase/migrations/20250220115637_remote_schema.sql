create extension if not exists "vector" with schema "public" version '0.8.0';

create type "public"."user_role" as enum ('admin', 'user');

create sequence "public"."documents_id_seq";

create sequence "public"."n8n_chat_histories_id_seq";

drop policy "Allow users to read role permissions" on "public"."role_permissions";

drop policy "Allow admins to manage roles" on "public"."user_roles";

drop policy "Allow auth admin to read user roles" on "public"."user_roles";

drop policy "Allow users to read their own roles" on "public"."user_roles";

drop policy "Users can view themselves, admins can view all" on "public"."users";

revoke delete on table "public"."role_permissions" from "anon";

revoke insert on table "public"."role_permissions" from "anon";

revoke references on table "public"."role_permissions" from "anon";

revoke select on table "public"."role_permissions" from "anon";

revoke trigger on table "public"."role_permissions" from "anon";

revoke truncate on table "public"."role_permissions" from "anon";

revoke update on table "public"."role_permissions" from "anon";

revoke delete on table "public"."role_permissions" from "authenticated";

revoke insert on table "public"."role_permissions" from "authenticated";

revoke references on table "public"."role_permissions" from "authenticated";

revoke select on table "public"."role_permissions" from "authenticated";

revoke trigger on table "public"."role_permissions" from "authenticated";

revoke truncate on table "public"."role_permissions" from "authenticated";

revoke update on table "public"."role_permissions" from "authenticated";

revoke delete on table "public"."role_permissions" from "service_role";

revoke insert on table "public"."role_permissions" from "service_role";

revoke references on table "public"."role_permissions" from "service_role";

revoke select on table "public"."role_permissions" from "service_role";

revoke trigger on table "public"."role_permissions" from "service_role";

revoke truncate on table "public"."role_permissions" from "service_role";

revoke update on table "public"."role_permissions" from "service_role";

revoke delete on table "public"."user_roles" from "service_role";

revoke insert on table "public"."user_roles" from "service_role";

revoke references on table "public"."user_roles" from "service_role";

revoke select on table "public"."user_roles" from "service_role";

revoke trigger on table "public"."user_roles" from "service_role";

revoke truncate on table "public"."user_roles" from "service_role";

revoke update on table "public"."user_roles" from "service_role";

revoke delete on table "public"."user_roles" from "supabase_auth_admin";

revoke insert on table "public"."user_roles" from "supabase_auth_admin";

revoke references on table "public"."user_roles" from "supabase_auth_admin";

revoke select on table "public"."user_roles" from "supabase_auth_admin";

revoke trigger on table "public"."user_roles" from "supabase_auth_admin";

revoke truncate on table "public"."user_roles" from "supabase_auth_admin";

revoke update on table "public"."user_roles" from "supabase_auth_admin";

alter table "public"."role_permissions" drop constraint "role_permissions_role_permission_key";

alter table "public"."user_roles" drop constraint "user_roles_user_id_fkey";

alter table "public"."user_roles" drop constraint "user_roles_user_id_role_key";

drop function if exists "public"."assign_role"(target_user_id uuid, new_role app_role);

drop function if exists "public"."authorize"(requested_permission app_permission);

drop function if exists "public"."custom_access_token_hook"(event jsonb);

drop function if exists "public"."get_my_role"();

drop function if exists "public"."has_permission"(requested_permission app_permission);

drop function if exists "public"."is_admin"();

drop view if exists "public"."users_with_roles";

alter table "public"."role_permissions" drop constraint "role_permissions_pkey";

alter table "public"."user_roles" drop constraint "user_roles_pkey";

drop index if exists "public"."role_permissions_pkey";

drop index if exists "public"."role_permissions_role_permission_key";

drop index if exists "public"."user_roles_pkey";

drop index if exists "public"."user_roles_user_id_role_key";

drop table "public"."role_permissions";

drop table "public"."user_roles";

create table "public"."documents" (
    "id" bigint not null default nextval('documents_id_seq'::regclass),
    "content" text,
    "metadata" jsonb,
    "embedding" vector(1536)
);


create table "public"."leads" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text,
    "vehicle_info" text,
    "email" text,
    "problem" text,
    "zip_code" integer
);


create table "public"."n8n_chat_histories" (
    "id" integer not null default nextval('n8n_chat_histories_id_seq'::regclass),
    "session_id" text not null,
    "message" jsonb not null
);


alter table "public"."users" add column "role" user_role default 'admin'::user_role;

alter sequence "public"."documents_id_seq" owned by "public"."documents"."id";

alter sequence "public"."n8n_chat_histories_id_seq" owned by "public"."n8n_chat_histories"."id";

drop type "public"."app_permission";

drop type "public"."app_role";

CREATE UNIQUE INDEX documents_pkey ON public.documents USING btree (id);

CREATE UNIQUE INDEX leads_pkey ON public.leads USING btree (id);

CREATE UNIQUE INDEX n8n_chat_histories_pkey ON public.n8n_chat_histories USING btree (id);

alter table "public"."documents" add constraint "documents_pkey" PRIMARY KEY using index "documents_pkey";

alter table "public"."leads" add constraint "leads_pkey" PRIMARY KEY using index "leads_pkey";

alter table "public"."n8n_chat_histories" add constraint "n8n_chat_histories_pkey" PRIMARY KEY using index "n8n_chat_histories_pkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.match_documents(query_embedding vector, match_count integer DEFAULT NULL::integer, filter jsonb DEFAULT '{}'::jsonb)
 RETURNS TABLE(id bigint, content text, metadata jsonb, similarity double precision)
 LANGUAGE plpgsql
AS $function$
#variable_conflict use_column
begin
  return query
  select
    id,
    content,
    metadata,
    1 - (documents.embedding <=> query_embedding) as similarity
  from documents
  where metadata @> filter
  order by documents.embedding <=> query_embedding
  limit match_count;
end;
$function$
;

grant delete on table "public"."documents" to "anon";

grant insert on table "public"."documents" to "anon";

grant references on table "public"."documents" to "anon";

grant select on table "public"."documents" to "anon";

grant trigger on table "public"."documents" to "anon";

grant truncate on table "public"."documents" to "anon";

grant update on table "public"."documents" to "anon";

grant delete on table "public"."documents" to "authenticated";

grant insert on table "public"."documents" to "authenticated";

grant references on table "public"."documents" to "authenticated";

grant select on table "public"."documents" to "authenticated";

grant trigger on table "public"."documents" to "authenticated";

grant truncate on table "public"."documents" to "authenticated";

grant update on table "public"."documents" to "authenticated";

grant delete on table "public"."documents" to "service_role";

grant insert on table "public"."documents" to "service_role";

grant references on table "public"."documents" to "service_role";

grant select on table "public"."documents" to "service_role";

grant trigger on table "public"."documents" to "service_role";

grant truncate on table "public"."documents" to "service_role";

grant update on table "public"."documents" to "service_role";

grant delete on table "public"."leads" to "anon";

grant insert on table "public"."leads" to "anon";

grant references on table "public"."leads" to "anon";

grant select on table "public"."leads" to "anon";

grant trigger on table "public"."leads" to "anon";

grant truncate on table "public"."leads" to "anon";

grant update on table "public"."leads" to "anon";

grant delete on table "public"."leads" to "authenticated";

grant insert on table "public"."leads" to "authenticated";

grant references on table "public"."leads" to "authenticated";

grant select on table "public"."leads" to "authenticated";

grant trigger on table "public"."leads" to "authenticated";

grant truncate on table "public"."leads" to "authenticated";

grant update on table "public"."leads" to "authenticated";

grant delete on table "public"."leads" to "service_role";

grant insert on table "public"."leads" to "service_role";

grant references on table "public"."leads" to "service_role";

grant select on table "public"."leads" to "service_role";

grant trigger on table "public"."leads" to "service_role";

grant truncate on table "public"."leads" to "service_role";

grant update on table "public"."leads" to "service_role";

grant delete on table "public"."n8n_chat_histories" to "anon";

grant insert on table "public"."n8n_chat_histories" to "anon";

grant references on table "public"."n8n_chat_histories" to "anon";

grant select on table "public"."n8n_chat_histories" to "anon";

grant trigger on table "public"."n8n_chat_histories" to "anon";

grant truncate on table "public"."n8n_chat_histories" to "anon";

grant update on table "public"."n8n_chat_histories" to "anon";

grant delete on table "public"."n8n_chat_histories" to "authenticated";

grant insert on table "public"."n8n_chat_histories" to "authenticated";

grant references on table "public"."n8n_chat_histories" to "authenticated";

grant select on table "public"."n8n_chat_histories" to "authenticated";

grant trigger on table "public"."n8n_chat_histories" to "authenticated";

grant truncate on table "public"."n8n_chat_histories" to "authenticated";

grant update on table "public"."n8n_chat_histories" to "authenticated";

grant delete on table "public"."n8n_chat_histories" to "service_role";

grant insert on table "public"."n8n_chat_histories" to "service_role";

grant references on table "public"."n8n_chat_histories" to "service_role";

grant select on table "public"."n8n_chat_histories" to "service_role";

grant trigger on table "public"."n8n_chat_histories" to "service_role";

grant truncate on table "public"."n8n_chat_histories" to "service_role";

grant update on table "public"."n8n_chat_histories" to "service_role";


